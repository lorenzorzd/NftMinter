{"version":3,"sources":["utils/pinata.js","utils/keys.js","utils/interact.js","Minter.js","App.js","reportWebVitals.js","index.js"],"names":["axios","require","pinJSONToIPFS","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","JSONBody","wrap","_context","prev","next","abrupt","post","headers","pinata_api_key","pinata_secret_api_key","then","response","success","pinataUrl","data","IpfsHash","catch","error","console","log","message","stop","_x","apply","arguments","config","web3","createAlchemyWeb3","contractABI","contractAddress","connectWallet","adressArray","obj","window","ethereum","request","method","sent","status","address","t0","_jsx","children","_jsxs","target","href","getCurrentWalletConnected","_ref2","_callee2","addressArray","_context2","length","mintNFT","_ref3","_callee3","url","name","description","metadata","pinataResponse","tokenURI","transactionParameters","txHash","_context3","trim","Object","image","eth","Contract","contract","to","from","selectedAddress","methods","encodeABI","params","_x2","_x3","Minter","props","_useState","useState","_useState2","_slicedToArray","walletAddress","setWallet","_useState3","_useState4","setStatus","_useState5","_useState6","setName","_useState7","_useState8","setDescription","_useState9","_useState10","setURL","useEffect","_yield$getCurrentWall","on","accounts","connectWalletPressed","walletResponse","onMintPressed","_yield$mintNFT","className","id","onClick","String","substring","type","placeholder","onChange","event","value","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"qtKAKMA,EAAQC,EAAQ,KAETC,EAAa,eAAAC,EAAAC,YAAAC,cAAAC,MAAG,SAAAC,EAAMC,GAAQ,OAAAH,cAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEvC,MADS,iDACTF,EAAAG,OAAA,SACOb,EACFc,KAHI,iDAGMN,EAAU,CACjBO,QAAS,CACLC,eCRL,uBDSKC,sBCLL,sEDQFC,MAAK,SAAUC,GACb,MAAO,CACHC,SAAS,EACTC,UAAW,qCAAuCF,EAASG,KAAKC,SAEvE,IACCC,OAAM,SAAUC,GAEb,OADAC,QAAQC,IAAIF,GACL,CACHL,SAAS,EACTQ,QAASH,EAAMG,QAG3B,KAAE,wBAAAlB,EAAAmB,OAAA,GAAAtB,EAAA,KACL,gBAxByBuB,GAAA,OAAA3B,EAAA4B,MAAA,KAAAC,UAAA,K,OEJ1B/B,EAAQ,KAAUgC,SAClB,IACMC,GAAOC,EADiBlC,EAAQ,KAA9BkC,mBDHG,wECMLC,EAAcnC,EAAQ,KACtBoC,EAAkB,6CAIXC,EAAa,eAAAnC,EAAAC,YAAAC,cAAAC,MAAG,SAAAC,IAAA,IAAAgC,EAAAC,EAAA,OAAAnC,cAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WAEtB6B,OAAOC,SAAS,CAADhC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEgB6B,OAAOC,SAASC,QAAQ,CAC9CC,OAAQ,wBACT,KAAD,EAIA,OANIL,EAAW7B,EAAAmC,KAGXL,EAAM,CACRM,OAAQ,oEACRC,QAASR,EAAY,IACxB7B,EAAAG,OAAA,SACM2B,GAAG,cAAA9B,EAAAC,KAAA,EAAAD,EAAAsC,GAAAtC,EAAA,SAAAA,EAAAG,OAAA,SAEH,CACHkC,QAAS,GACTD,OAAQ,eAAOpC,EAAAsC,GAAMpB,UACxB,QAAAlB,EAAAE,KAAA,wBAAAF,EAAAG,OAAA,SAGE,CACLkC,QAAS,GACTD,OACEG,cAAA,QAAAC,SACEC,eAAA,KAAAD,SAAA,CACG,IAAI,eACF,IACHD,cAAA,KAAGG,OAAO,SAASC,KAAI,oCAAsCH,SAAC,kFAOrE,yBAAAxC,EAAAmB,OAAA,GAAAtB,EAAA,kBAEJ,kBAnCqB,OAAAJ,EAAA4B,MAAA,KAAAC,UAAA,KAqCbsB,EAAyB,eAAAC,EAAAnD,YAAAC,cAAAC,MAAG,SAAAkD,IAAA,IAAAC,EAAA,OAAApD,cAAAI,MAAA,SAAAiD,GAAA,cAAAA,EAAA/C,KAAA+C,EAAA9C,MAAA,WACjC6B,OAAOC,SAAS,CAADgB,EAAA9C,KAAA,gBAAA8C,EAAA/C,KAAA,EAAA+C,EAAA9C,KAAA,EAEY6B,OAAOC,SAASC,QAAQ,CAC/CC,OAAQ,iBACT,KAAD,EAFgB,MAAZa,EAAYC,EAAAb,MAGDc,OAAS,GAAC,CAAAD,EAAA9C,KAAA,eAAA8C,EAAA7C,OAAA,SAChB,CACPkC,QAASU,EAAa,GACtBX,OAAQ,sEACP,cAAAY,EAAA7C,OAAA,SAEM,CACPkC,QAAS,GACTD,OAAQ,iEACP,QAAAY,EAAA9C,KAAA,wBAAA8C,EAAA/C,KAAA,GAAA+C,EAAAV,GAAAU,EAAA,SAAAA,EAAA7C,OAAA,SAGE,CACHkC,QAAS,GACTD,OAAQ,gBAAQY,EAAAV,GAAIpB,UACvB,QAAA8B,EAAA9C,KAAA,wBAAA8C,EAAA7C,OAAA,SAGM,CACPkC,QAAS,GACTD,OACIG,cAAA,QAAAC,SACAC,eAAA,KAAAD,SAAA,CACK,IAAI,eACF,IACHD,cAAA,KAAGG,OAAO,SAASC,KAAI,oCAAsCH,SAAC,kFAOrE,yBAAAQ,EAAA7B,OAAA,GAAA2B,EAAA,mBAEJ,kBAxCiC,OAAAD,EAAAxB,MAAA,KAAAC,UAAA,KA0CzB4B,EAAO,eAAAC,EAAAzD,YAAAC,cAAAC,MAAG,SAAAwD,EAAMC,EAAKC,EAAMC,GAAW,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAjE,cAAAI,MAAA,SAAA8D,GAAA,cAAAA,EAAA5D,KAAA4D,EAAA3D,MAAA,UAE7B,IAAdmD,EAAIS,QAAgC,IAAfR,EAAKQ,QAAsC,IAAtBP,EAAYO,OAAa,CAAAD,EAAA3D,KAAA,eAAA2D,EAAA1D,OAAA,SAC5D,CACHO,SAAS,EACT0B,OAAQ,oEACX,OASL,OALMoB,EAAW,IAAIO,QACZT,KAAOA,EAChBE,EAASQ,MAAQX,EACjBG,EAASD,YAAcA,EAEvBM,EAAA3D,KAAA,EAC6BV,EAAcgE,GAAU,KAAD,EAAhC,IAAdC,EAAcI,EAAA1B,MACAzB,QAAQ,CAADmD,EAAA3D,KAAA,gBAAA2D,EAAA1D,OAAA,SAChB,CACHO,SAAS,EACT0B,OAAQ,qEACX,QAEoC,OAAnCsB,EAAWD,EAAe9C,UAASkD,EAAA3D,KAAA,GAEjB,IAAIsB,EAAKyC,IAAIC,SAASxC,EAAaC,GAAiB,KAAD,GAQ3E,OARAI,OAAOoC,SAAQN,EAAA1B,KAETwB,EAAwB,CAC1BS,GAAIzC,EACJ0C,KAAMtC,OAAOC,SAASsC,gBACtB,KAAQvC,OAAOoC,SAASI,QAAQrB,QAAQnB,OAAOC,SAASsC,gBAAiBZ,GAAUc,aAGvFX,EAAA5D,KAAA,GAAA4D,EAAA3D,KAAA,GAEqB6B,OAAOC,SACvBC,QAAQ,CACLC,OAAQ,sBACRuC,OAAQ,CAACd,KACV,KAAD,GAJM,OAANC,EAAMC,EAAA1B,KAAA0B,EAAA1D,OAAA,SAKL,CACHO,SAAS,EACT0B,OAAQ,mFAAgFwB,IAC3F,eAAAC,EAAA5D,KAAA,GAAA4D,EAAAvB,GAAAuB,EAAA,UAAAA,EAAA1D,OAAA,SAEM,CACHO,SAAS,EACT0B,OAAQ,sCAA8ByB,EAAAvB,GAAMpB,UAC/C,yBAAA2C,EAAA1C,OAAA,GAAAiC,EAAA,oBAGJ,gBAnDmBhC,EAAAsD,EAAAC,GAAA,OAAAxB,EAAA9B,MAAA,KAAAC,UAAA,KCgBLsD,EArGA,SAACC,GA4Bd,IAAAC,EAAmCC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAAxCI,EAAaF,EAAA,GAAEG,EAASH,EAAA,GAC/BI,EAA4BL,mBAAS,IAAGM,EAAAJ,YAAAG,EAAA,GAAjChD,EAAMiD,EAAA,GAAEC,EAASD,EAAA,GACxBE,EAAwBR,mBAAS,IAAGS,EAAAP,YAAAM,EAAA,GAA7BjC,EAAIkC,EAAA,GAAEC,EAAOD,EAAA,GACpBE,EAAsCX,mBAAS,IAAGY,EAAAV,YAAAS,EAAA,GAA3CnC,EAAWoC,EAAA,GAAEC,EAAcD,EAAA,GAClCE,EAAsBd,mBAAS,IAAGe,EAAAb,YAAAY,EAAA,GAA3BxC,EAAGyC,EAAA,GAAEC,EAAMD,EAAA,GAElBE,oBAAStG,YAAAC,cAAAC,MAAC,SAAAC,IAAA,IAAAoG,EAAA5D,EAAAD,EAAA,OAAAzC,cAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACwB0C,IAA4B,KAAD,EAAAqD,EAAAjG,EAAAmC,KAApDE,EAAO4D,EAAP5D,QAASD,EAAM6D,EAAN7D,OAChB+C,EAAU9C,GACViD,EAAUlD,GAlCNL,OAAOC,SACTD,OAAOC,SAASkE,GAAG,mBAAmB,SAACC,GACjCA,EAASlD,OAAS,GACpBkC,EAAUgB,EAAS,IACnBb,EAAU,uEAEVH,EAAU,IACVG,EAAU,gEAEd,IAEAA,EACE7C,eAAA,KAAAD,SAAA,CACG,IAAI,eACF,IACHD,cAAA,KAAGG,OAAO,SAASC,KAAI,oCAAsCH,SAAC,+EAqBhD,wBAAAxC,EAAAmB,OAAA,GAAAtB,EAAA,KACnB,IAEH,IAAMuG,EAAoB,eAAAvD,EAAAnD,YAAAC,cAAAC,MAAG,SAAAkD,IAAA,IAAAuD,EAAA,OAAA1G,cAAAI,MAAA,SAAAiD,GAAA,cAAAA,EAAA/C,KAAA+C,EAAA9C,MAAA,cAAA8C,EAAA9C,KAAA,EACE0B,IAAgB,KAAD,EAAtCyE,EAAcrD,EAAAb,KACpBmD,EAAUe,EAAejE,QACzBkD,EAAUe,EAAehE,SAAS,wBAAAW,EAAA7B,OAAA,GAAA2B,EAAA,KACnC,kBAJyB,OAAAD,EAAAxB,MAAA,KAAAC,UAAA,KAMpBgF,EAAa,eAAAnD,EAAAzD,YAAAC,cAAAC,MAAG,SAAAwD,IAAA,IAAAmD,EAAAnE,EAAA,OAAAzC,cAAAI,MAAA,SAAA8D,GAAA,cAAAA,EAAA5D,KAAA4D,EAAA3D,MAAA,cAAA2D,EAAA3D,KAAA,EACKgD,EAAQG,EAAKC,EAAMC,GAAa,KAAD,EAAAgD,EAAA1C,EAAA1B,KAAhDC,EAAMmE,EAANnE,OACRkD,EAAUlD,GAAQ,wBAAAyB,EAAA1C,OAAA,GAAAiC,EAAA,KACnB,kBAHkB,OAAAD,EAAA9B,MAAA,KAAAC,UAAA,KAKnB,OACEmB,eAAA,OAAK+D,UAAU,SAAQhE,SAAA,CACrBD,cAAA,UAAQkE,GAAG,eAAeC,QAASN,EAAqB5D,SACrD0C,EAAcjC,OAAS,EACtB,cACA0D,OAAOzB,GAAe0B,UAAU,EAAG,GACnC,MACAD,OAAOzB,GAAe0B,UAAU,IAEhCrE,cAAA,QAAAC,SAAM,qBAIVD,cAAA,SACAA,cAAA,MAAIkE,GAAG,QAAOjE,SAAC,wDACfD,cAAA,KAAAC,SAAG,6EAGHC,eAAA,QAAAD,SAAA,CACED,cAAA,MAAAC,SAAI,iCACJD,cAAA,SACEsE,KAAK,OACLC,YAAY,gDACZC,SAAU,SAACC,GAAK,OAAKjB,EAAOiB,EAAMtE,OAAOuE,MAAM,IAEjD1E,cAAA,MAAAC,SAAI,wBACJD,cAAA,SACEsE,KAAK,OACLC,YAAY,qBACZC,SAAU,SAACC,GAAK,OAAKvB,EAAQuB,EAAMtE,OAAOuE,MAAM,IAElD1E,cAAA,MAAAC,SAAI,+BACJD,cAAA,SACEsE,KAAK,OACLC,YAAY,yCACZC,SAAU,SAACC,GAAK,OAAKpB,EAAeoB,EAAMtE,OAAOuE,MAAM,OAG3D1E,cAAA,UAAQkE,GAAG,aAAaC,QAASJ,EAAc9D,SAAC,aAGhDD,cAAA,KAAGkE,GAAG,SAAQjE,SACXJ,MAIT,EC9Fe8E,MARf,WACE,OACE3E,cAAA,OAAKiE,UAAU,MAAKhE,SAClBD,cAACqC,EAAM,KAGb,ECGeuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB7G,MAAK,SAAAf,GAAkD,IAA/C6H,EAAM7H,EAAN6H,OAAQC,EAAM9H,EAAN8H,OAAQC,EAAM/H,EAAN+H,OAAQC,EAAMhI,EAANgI,OAAQC,EAAOjI,EAAPiI,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,EACV,GAEJ,ECJAO,IAASC,OACPrF,cAACsF,IAAMC,WAAU,CAAAtF,SACfD,cAAC2E,EAAG,MAENa,SAASC,eAAe,SAM1Bb,G","file":"static/js/main.405c26fe.chunk.js","sourcesContent":["import { pinataKey, pinataSecret } from './keys';\n\nconst key = pinataKey();\nconst secret = pinataSecret();\n\nconst axios = require('axios');\n\nexport const pinJSONToIPFS = async(JSONBody) => {\n    const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\n    //making axios POST request to Pinata ⬇️\n    return axios\n        .post(url, JSONBody, {\n            headers: {\n                pinata_api_key: key,\n                pinata_secret_api_key: secret,\n            }\n        })\n        .then(function (response) {\n           return {\n               success: true,\n               pinataUrl: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\n           };\n        })\n        .catch(function (error) {\n            console.log(error)\n            return {\n                success: false,\n                message: error.message,\n            }\n\n    });\n};","export const alchemyKey = () => {\n    return \"https://eth-goerli.g.alchemy.com/v2/WJT03KtIvPmGNO0d-P-XOCfVZojgKqXD\"\n}\n\nexport const pinataKey = () => {\n    return \"7e05f9352778aad98115\"\n}\n\nexport const pinataSecret = () => {\n    return \"d93e35761db3ddcacb3919f2f89a5f2bcd481de39aaee00611fc54f156a25ea2\"\n}","import {pinJSONToIPFS} from './pinata.js'\nimport { alchemyKey } from './keys.js';\n\nrequire('dotenv').config();\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey());\n\nconst contractABI = require('../contract-abi.json')\nconst contractAddress = \"0x4C4a07F737Bf57F6632B6CAB089B78f62385aCaE\";\n\n\n\nexport const connectWallet = async () => {\n\n    if(window.ethereum) {\n        try {\n            const adressArray = await window.ethereum.request({\n                method: \"eth_requestAccounts\",\n            });\n            const obj = {\n                status: \"👆🏽 Write a message in the text-field above.\",\n                address: adressArray[0],\n            };\n            return obj;\n        } catch (error) {\n            return {\n                address: \"\",\n                status: \"😥\" + error.message,\n            };\n        }\n    } else {\n        return {\n          address: \"\",\n          status: (\n            <span>\n              <p>\n                {\" \"}\n                🦊{\" \"}\n                <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n                  You must install Metamask, a virtual Ethereum wallet, in your\n                  browser.\n                </a>\n              </p>\n            </span>\n          ),\n        };\n      }\n    };\n\nexport const getCurrentWalletConnected = async () => {\n    if (window.ethereum) {\n        try {\n        const addressArray = await window.ethereum.request({\n            method: \"eth_accounts\",\n        });\n        if (addressArray.length > 0) {\n            return {\n            address: addressArray[0],\n            status: \"👆🏽 Write a message in the text-field above.\",\n            };\n        } else {\n            return {\n            address: \"\",\n            status: \"🦊 Connect to Metamask using the top right button.\",\n            };\n        }\n        } catch (err) {\n        return {\n            address: \"\",\n            status: \"😥 \" + err.message,\n        };\n        }\n    } else {\n        return {\n        address: \"\",\n        status: (\n            <span>\n            <p>\n                {\" \"}\n                🦊{\" \"}\n                <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n                You must install Metamask, a virtual Ethereum wallet, in your\n                browser.\n                </a>\n            </p>\n            </span>\n        ),\n        };\n    }\n    };\n\nexport const mintNFT = async(url, name, description) => {\n    //error handling\n    if (url.trim() == \"\" || (name.trim() == \"\" || description.trim() == \"\")) {\n        return {\n            success: false,\n            status: \"❗Please make sure all fields are completed before minting.\",\n        }\n    }\n    \n    //make metadata\n    const metadata = new Object();\n    metadata.name = name;\n    metadata.image = url;\n    metadata.description = description;\n\n    //make pinata call\n    const pinataResponse = await pinJSONToIPFS(metadata);\n    if (!pinataResponse.success) {\n        return {\n            success: false,\n            status: \"😢 Something went wrong while uploading your tokenURI.\",\n        }\n    }\n    const tokenURI = pinataResponse.pinataUrl;\n\n    window.contract = await new web3.eth.Contract(contractABI, contractAddress);\n\n    const transactionParameters = {\n        to: contractAddress, // Required except during contract publications.\n        from: window.ethereum.selectedAddress, // must match user's active address.\n        'data': window.contract.methods.mintNFT(window.ethereum.selectedAddress, tokenURI).encodeABI()//make call to NFT smart contract\n    };\n    \n    //sign the transaction via Metamask\n    try {\n    const txHash = await window.ethereum\n        .request({\n            method: 'eth_sendTransaction',\n            params: [transactionParameters],\n        });\n    return {\n        success: true,\n        status: \"✅ Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/\" + txHash\n    }\n    } catch (error) {\n    return {\n        success: false,\n        status: \"😥 Something went wrong: \" + error.message\n    }\n\n    }\n}\n\n","import { useEffect, useState } from \"react\";\nimport {\n  connectWallet,\n  getCurrentWalletConnected,\n  mintNFT\n} from \"./utils/interact.js\";\nconst Minter = (props) => {\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus(\n        <p>\n          {\" \"}\n          🦊{\" \"}\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n            You must install Metamask, a virtual Ethereum wallet, in your\n            browser.\n          </a>\n        </p>\n      );\n    }\n  }\n\n  //State variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [url, setURL] = useState(\"\");\n \n  useEffect(async () => { //TODO: implement\n    const {address, status} = await getCurrentWalletConnected();\n    setWallet(address)\n    setStatus(status);\n\n    addWalletListener();\n  }, []);\n\n  const connectWalletPressed = async () => { //TODO: implement\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setStatus(walletResponse.address);\n  };\n\n  const onMintPressed = async () => { //TODO: implement\n    const { status } = await mintNFT(url, name, description);\n    setStatus(status);\n  };\n  \n  return (\n    <div className=\"Minter\">\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          \"Connected: \" +\n          String(walletAddress).substring(0, 6) +\n          \"...\" +\n          String(walletAddress).substring(38)\n        ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n\n      <br></br>\n      <h1 id=\"title\">🧙‍♂️ Lorenzo's NFT Minter</h1>\n      <p>\n        Simply add your asset's link, name, and description, then press \"Mint.\"\n      </p>\n      <form>\n        <h2>🖼 Link to asset: </h2>\n        <input\n          type=\"text\"\n          placeholder=\"e.g. https://gateway.pinata.cloud/ipfs/<hash>\"\n          onChange={(event) => setURL(event.target.value)}\n        />\n        <h2>🤔 Name: </h2>\n        <input\n          type=\"text\"\n          placeholder=\"e.g. My first NFT!\"\n          onChange={(event) => setName(event.target.value)}\n        />\n        <h2>✍️ Description: </h2>\n        <input\n          type=\"text\"\n          placeholder=\"e.g. Even cooler than cryptokitties ;)\"\n          onChange={(event) => setDescription(event.target.value)}\n        />\n      </form>\n      <button id=\"mintButton\" onClick={onMintPressed}>\n        Mint NFT\n      </button>\n      <p id=\"status\">\n        {status}\n      </p>\n    </div>\n  );\n};\n\nexport default Minter;\n","import './App.css';\nimport Minter from './Minter'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Minter></Minter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}